{"version":3,"sources":["utils/API.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","get","App","useState","employees","setEmployees","allEmployees","setAllEmployees","useEffect","API","then","data","results","className","Jumbotron","fluid","Container","onChange","e","searchValue","target","value","searchEmployees","filter","name","first","toLowerCase","includes","onClick","sortedEmployees","sort","a","b","last","Table","striped","bordered","hover","map","key","id","email","phone","src","picture","thumbnail","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mTAAMA,EAAQC,EAAQ,IAEP,EACC,WACZ,OAAOD,EAAME,IAAI,kD,sCC2GNC,MAtGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,KAkDb,OA9CAC,qBAAU,WACRC,IAAmBC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACzBN,EAAaM,EAAKC,SAClBL,EAAgBI,EAAKC,cAEtB,IA0CD,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kDACA,4EACA,2BAAOH,UAAU,iBAAiBI,SA7C3B,SAACC,GACd,IAAMC,EAAcD,EAAEE,OAAOC,MACvBC,EAAkBhB,EAAaiB,QAAO,SAACnB,GAC3C,QACEA,EAAUoB,KAAKC,MAAMC,cAAcC,SAASR,EAAYO,kBAM5DrB,EAAaiB,MAoCP,6BACA,6BACA,4BAAQM,QAnCE,WAChB,IAAMC,EAAkBzB,EAAU0B,MAAK,SAACC,EAAGC,GACzC,OAAID,EAAEP,KAAKC,MAAQO,EAAER,KAAKC,OAChB,EACCM,EAAEP,KAAKC,MAAQO,EAAER,KAAKC,MACxB,EAEA,KAGXpB,EAAa,YAAIwB,MAyBX,+CAGA,6BACA,6BACA,4BAAQD,QA3BC,WACf,IAAMC,EAAkBzB,EAAU0B,MAAK,SAACC,EAAGC,GACzC,OAAID,EAAEP,KAAKS,KAAOD,EAAER,KAAKS,MACf,EACCF,EAAEP,KAAKS,KAAOD,EAAER,KAAKS,KACvB,EAEA,KAGX5B,EAAa,YAAIwB,MAiBX,gDAMJ,yBAAKhB,UAAU,aACb,kBAACqB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,0CACA,yCACA,6CACA,4CACA,gDAGJ,+BACGjC,EAAUkC,KAAI,SAAClC,GACd,OACE,wBAAImC,IAAKnC,EAAUoC,GAAGnB,OACpB,4BAAKjB,EAAUoB,KAAKC,OACpB,4BAAKrB,EAAUoB,KAAKS,MACpB,4BAAK7B,EAAUqC,OACf,4BAAKrC,EAAUsC,OACf,4BACE,yBAAKC,IAAKvC,EAAUwC,QAAQC,UAAWC,IAAI,uBCvF3CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77241c07.chunk.js","sourcesContent":["const axios = require(\"axios\");\n\nexport default {\n  getEmployees: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  },\n};\n","import React, { useState, useEffect } from \"react\";\nimport API from \"./utils/API\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\n\nimport Table from \"react-bootstrap/Table\";\nimport \"./App.css\";\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  const [allEmployees, setAllEmployees] = useState([]);\n\n  useEffect(() => {\n    API.getEmployees().then(({ data }) => {\n      setEmployees(data.results);\n      setAllEmployees(data.results);\n    });\n  }, []);\n\n  const search = (e) => {\n    const searchValue = e.target.value;\n    const searchEmployees = allEmployees.filter((employees) => {\n      if (\n        employees.name.first.toLowerCase().includes(searchValue.toLowerCase())\n      ) {\n        return true;\n      }\n      return false;\n    });\n    setEmployees(searchEmployees);\n  };\n\n  const sortFirst = () => {\n    const sortedEmployees = employees.sort((a, b) => {\n      if (a.name.first < b.name.first) {\n        return -1;\n      } else if (a.name.first > b.name.first) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setEmployees([...sortedEmployees]);\n  };\n\n  const sortLast = () => {\n    const sortedEmployees = employees.sort((a, b) => {\n      if (a.name.last < b.name.last) {\n        return -1;\n      } else if (a.name.last > b.name.last) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setEmployees([...sortedEmployees]);\n  };\n\n  return (\n    <div className=\"App\">\n      <Jumbotron fluid>\n        <Container>\n          <h1>Employee Directory</h1>\n          <h6>Enter a first name to search for an employee</h6>\n          <input className=\"input-group-lg\" onChange={search} />\n          <br />\n          <br />\n          <button onClick={sortFirst}>\n            Sort employees alphabetically by first name\n          </button>\n          <br />\n          <br />\n          <button onClick={sortLast}>\n            Sort employees alphabetically by last name\n          </button>\n        </Container>\n      </Jumbotron>\n\n      <div className=\"container\">\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email Address</th>\n              <th>Phone Number</th>\n              <th>Employee Photo</th>\n            </tr>\n          </thead>\n          <tbody>\n            {employees.map((employees) => {\n              return (\n                <tr key={employees.id.value}>\n                  <th>{employees.name.first}</th>\n                  <th>{employees.name.last}</th>\n                  <th>{employees.email}</th>\n                  <th>{employees.phone}</th>\n                  <th>\n                    <img src={employees.picture.thumbnail} alt=\"employee\"></img>\n                  </th>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}